{"version":3,"sources":["App.tsx","index.tsx"],"names":["registry","getDefaultRegistry","App","props","state","connected","handleValueChange","bind","this","handleConnect","init","sdk","frame","startAutoResizer","field","getValue","value","setState","schema","console","log","setValue","className","Provider","withTheme","pointer","getExtensionParams","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2SAqBMA,EAA2BC,cAEZC,E,YACnB,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KACDC,MAAQ,CAAEC,WAAW,GAC1B,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAHJ,E,iFAOrBC,KAAKC,kB,0IAIkBC,e,cAAjBC,E,QACFC,MAAMC,mB,mBAEkBF,EAAIG,MAAMC,Y,OAAhCC,E,OACNR,KAAKS,SAAS,CACZN,MACAN,WAAW,EACXW,QACAE,OAAQP,EAAIG,MAAMI,S,yFAISF,G,sEACzBR,KAAKJ,MAAMC,YAAaG,KAAKJ,MAAMO,I,gCAEnCQ,QAAQC,IAAIJ,G,mBACNR,KAAKJ,MAAMO,IAAIG,MAAMO,SAASL,I,8IAOxC,OACE,yBAAKM,UAAU,QACa,IAAzBd,KAAKJ,MAAMC,UACV,6BACGG,KAAKJ,MAAMO,IACV,kBAAC,IAAWY,SAAZ,CAAqBP,MAAO,CAAEL,IAAKH,KAAKJ,MAAMO,MAC3Ca,YACC,kBAAC,IAAD,CACEC,QACEC,YAAmBlB,KAAKJ,MAAMO,IAAIG,MAAMI,OAAQ,IAC7CO,QAELE,SAAUnB,KAAKF,kBACfY,OAAQV,KAAKJ,MAAMc,OACnBF,MAAOR,KAAKJ,MAAMY,MAClBhB,SAAUA,MAId,MAGN,0C,GAzDuB4B,IAAMC,WCnBvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.bc777a08.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { init, SDK } from \"dc-extensions-sdk\";\nimport {\n  Editor,\n  EditorRegistry,\n  getDefaultRegistry,\n  getExtensionParams,\n  SdkContext,\n  withTheme\n} from \"unofficial-dynamic-content-ui\";\n\ninterface AppState {\n  connected: boolean;\n  sdk?: SDK;\n  value?: string;\n  schema?: any;\n  openDialog?: string;\n  openDialogCallback?: (value: any) => void;\n}\n\nconst registry: EditorRegistry = getDefaultRegistry();\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { connected: false };\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    this.handleConnect();\n  }\n\n  public async handleConnect(): Promise<void> {\n    const sdk: SDK = await init();\n    sdk.frame.startAutoResizer();\n\n    const value: string = await sdk.field.getValue();\n    this.setState({\n      sdk,\n      connected: true,\n      value,\n      schema: sdk.field.schema\n    });\n  }\n\n  public async handleValueChange(value: string): Promise<void> {\n    if (this.state.connected && this.state.sdk) {\n      try {\n        console.log(value);\n        await this.state.sdk.field.setValue(value);\n        // tslint:disable-next-line\n      } catch (err) {}\n    }\n  }\n\n  public render(): React.ReactElement {\n    return (\n      <div className=\"App\">\n        {this.state.connected === true ? (\n          <div>\n            {this.state.sdk ? (\n              <SdkContext.Provider value={{ sdk: this.state.sdk }}>\n                {withTheme(\n                  <Editor\n                    pointer={\n                      getExtensionParams(this.state.sdk.field.schema, {})\n                        .pointer\n                    }\n                    onChange={this.handleValueChange}\n                    schema={this.state.schema}\n                    value={this.state.value}\n                    registry={registry}\n                  />\n                )}\n              </SdkContext.Provider>\n            ) : null}\n          </div>\n        ) : (\n          <div>&nbsp;</div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}